/*
  Dilarang keras menggandakan/mengcopy/menyebarkan/membajak/mendecompile 
  Software ini dalam bentuk apapun tanpa seijin pembuat software
  (Khanza.Soft Media). Bagi yang sengaja membajak softaware ini ta
  npa ijin, kami sumpahi sial 1000 turunan, miskin sampai 500 turu
  nan. Selalu mendapat kecelakaan sampai 400 turunan. Anak pertama
  nya cacat tidak punya kaki sampai 300 turunan. Susah cari jodoh
  sampai umur 50 tahun sampai 200 turunan. Ya Alloh maafkan kami 
  karena telah berdoa buruk, semua ini kami lakukan karena kami ti
  dak pernah rela karya kami dibajak tanpa ijin.
 */
package setting;

import fungsi.WarnaTable;
import fungsi.WarnaTable2;
import fungsi.batasInput;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.var;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import simrskhanza.DlgMasterPaketMCU;
import widget.Button;

/**
 *
 * @author dosen
 */
public final class DlgSetMCU extends javax.swing.JDialog {

    private DefaultTableModel tabModeResep, tabMode1;
    private sekuel Sequel = new sekuel();
    private validasi Valid = new validasi();
    private Connection koneksi = koneksiDB.condb();
    private PreparedStatement psresep, ps2, ps3, ps4;
    private ResultSet rsobat, rs2, rs3, rs4;
    private int i = 0, z = 0;
    private boolean ubah = false;
    private boolean[] pilih;
    private String[] kodebarang, namabarang, harga;
    private String jenis = "";
    private DlgMasterPaketMCU master = new DlgMasterPaketMCU(null, true);

    /**
     * Creates new form DlgPenyakit
     *
     * @param parent
     * @param modal
     */
    public DlgSetMCU(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocation(8, 1);

        TCari.setDocument(new batasInput((byte) 100).getKata(TCari));

        master.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
            }

            @Override
            public void windowClosing(WindowEvent e) {
            }

            @Override
            public void windowClosed(WindowEvent e) {
                if (master.getTable().getSelectedRow() != -1) {
                    idPaket.setText(master.getTable().getValueAt(master.getTable().getSelectedRow(), 1).toString());
                    TkdPaket.setText(master.getTable().getValueAt(master.getTable().getSelectedRow(), 2).toString());
                    TNmPaket.setText(master.getTable().getValueAt(master.getTable().getSelectedRow(), 3).toString());
                    kddokter.setText(master.getTable().getValueAt(master.getTable().getSelectedRow(), 4).toString());
                    nmdokter.setText(Sequel.cariIsi("select nm_dokter from dokter where kd_dokter=?",kddokter.getText()));
                    TkdPaket.requestFocus();
                    cmbJenis.setSelectedIndex(0);
                    tampilObatEdit(idPaket.getText());
                }
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });

        master.getTable().addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_SPACE) {
                    master.dispose();
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Popup = new javax.swing.JPopupMenu();
        ppBersihkan = new javax.swing.JMenuItem();
        idPaket = new widget.TextBox();
        jLabel6 = new widget.Label();
        internalFrame1 = new widget.InternalFrame();
        panelisi3 = new widget.panelisi();
        label9 = new widget.Label();
        TCari = new widget.TextBox();
        BtnCari = new widget.Button();
        BtnAll = new widget.Button();
        jLabel7 = new widget.Label();
        LCount = new widget.Label();
        BtnBatal = new widget.Button();
        BtnSimpan = new widget.Button();
        BtnKeluar = new widget.Button();
        FormInput = new widget.PanelBiasa();
        TkdPaket = new widget.TextBox();
        jLabel3 = new widget.Label();
        btnDokter1 = new widget.Button();
        TNmPaket = new widget.TextBox();
        cmbJenis = new widget.ComboBox();
        jLabel44 = new widget.Label();
        nmdokter = new widget.TextBox();
        kddokter = new widget.TextBox();
        jLabel4 = new widget.Label();
        Scroll = new widget.ScrollPane();
        tbResep = new widget.Table();

        Popup.setName("Popup"); // NOI18N

        ppBersihkan.setBackground(new java.awt.Color(255, 255, 254));
        ppBersihkan.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        ppBersihkan.setForeground(new java.awt.Color(70, 70, 70));
        ppBersihkan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/category.png"))); // NOI18N
        ppBersihkan.setText("Hapus Tindakan");
        ppBersihkan.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ppBersihkan.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ppBersihkan.setIconTextGap(8);
        ppBersihkan.setName("ppBersihkan"); // NOI18N
        ppBersihkan.setPreferredSize(new java.awt.Dimension(200, 25));
        ppBersihkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ppBersihkanActionPerformed(evt);
            }
        });
        Popup.add(ppBersihkan);

        idPaket.setHighlighter(null);
        idPaket.setName("idPaket"); // NOI18N

        jLabel6.setText("PPN :");
        jLabel6.setName("jLabel6"); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(35, 23));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ Paket MCU ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(70, 70, 70))); // NOI18N
        internalFrame1.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        panelisi3.setName("panelisi3"); // NOI18N
        panelisi3.setPreferredSize(new java.awt.Dimension(100, 43));
        panelisi3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 4, 9));

        label9.setText("Key Word :");
        label9.setName("label9"); // NOI18N
        label9.setPreferredSize(new java.awt.Dimension(68, 23));
        panelisi3.add(label9);

        TCari.setToolTipText("Alt+C");
        TCari.setName("TCari"); // NOI18N
        TCari.setPreferredSize(new java.awt.Dimension(245, 23));
        TCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TCariKeyPressed(evt);
            }
        });
        panelisi3.add(TCari);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('1');
        BtnCari.setToolTipText("Alt+1");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelisi3.add(BtnCari);

        BtnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Search-16x16.png"))); // NOI18N
        BtnAll.setMnemonic('2');
        BtnAll.setToolTipText("Alt+2");
        BtnAll.setName("BtnAll"); // NOI18N
        BtnAll.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAllActionPerformed(evt);
            }
        });
        BtnAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnAllKeyPressed(evt);
            }
        });
        panelisi3.add(BtnAll);

        jLabel7.setText("Record :");
        jLabel7.setName("jLabel7"); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(65, 23));
        panelisi3.add(jLabel7);

        LCount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LCount.setText("0");
        LCount.setName("LCount"); // NOI18N
        LCount.setPreferredSize(new java.awt.Dimension(50, 23));
        panelisi3.add(LCount);

        BtnBatal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Cancel-2-16x16.png"))); // NOI18N
        BtnBatal.setMnemonic('B');
        BtnBatal.setToolTipText("Alt+B");
        BtnBatal.setIconTextGap(3);
        BtnBatal.setName("BtnBatal"); // NOI18N
        BtnBatal.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBatalActionPerformed(evt);
            }
        });
        BtnBatal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnBatalKeyPressed(evt);
            }
        });
        panelisi3.add(BtnBatal);

        BtnSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/save-16x16.png"))); // NOI18N
        BtnSimpan.setMnemonic('S');
        BtnSimpan.setToolTipText("Alt+S");
        BtnSimpan.setName("BtnSimpan"); // NOI18N
        BtnSimpan.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSimpanActionPerformed(evt);
            }
        });
        panelisi3.add(BtnSimpan);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('5');
        BtnKeluar.setToolTipText("Alt+5");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        panelisi3.add(BtnKeluar);

        internalFrame1.add(panelisi3, java.awt.BorderLayout.PAGE_END);

        FormInput.setName("FormInput"); // NOI18N
        FormInput.setPreferredSize(new java.awt.Dimension(440, 107));
        FormInput.setLayout(null);

        TkdPaket.setEditable(false);
        TkdPaket.setHighlighter(null);
        TkdPaket.setName("TkdPaket"); // NOI18N
        FormInput.add(TkdPaket);
        TkdPaket.setBounds(105, 10, 95, 23);

        jLabel3.setText("Nama Paket :");
        jLabel3.setName("jLabel3"); // NOI18N
        FormInput.add(jLabel3);
        jLabel3.setBounds(0, 10, 100, 23);

        btnDokter1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/190.png"))); // NOI18N
        btnDokter1.setMnemonic('3');
        btnDokter1.setToolTipText("Alt+3");
        btnDokter1.setName("btnDokter1"); // NOI18N
        btnDokter1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDokter1ActionPerformed(evt);
            }
        });
        FormInput.add(btnDokter1);
        btnDokter1.setBounds(380, 10, 30, 23);

        TNmPaket.setEditable(false);
        TNmPaket.setHighlighter(null);
        TNmPaket.setName("TNmPaket"); // NOI18N
        FormInput.add(TNmPaket);
        TNmPaket.setBounds(200, 10, 180, 23);

        cmbJenis.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Ralan Pr", "Ralan Dr", "Laboratorium", "Radiologi" }));
        cmbJenis.setName("cmbJenis"); // NOI18N
        cmbJenis.setPreferredSize(new java.awt.Dimension(55, 28));
        cmbJenis.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbJenisItemStateChanged(evt);
            }
        });
        FormInput.add(cmbJenis);
        cmbJenis.setBounds(105, 70, 275, 23);

        jLabel44.setText("Jenis Tindakan :");
        jLabel44.setName("jLabel44"); // NOI18N
        FormInput.add(jLabel44);
        jLabel44.setBounds(0, 70, 100, 23);

        nmdokter.setEditable(false);
        nmdokter.setHighlighter(null);
        nmdokter.setName("nmdokter"); // NOI18N
        FormInput.add(nmdokter);
        nmdokter.setBounds(200, 40, 180, 23);

        kddokter.setEditable(false);
        kddokter.setHighlighter(null);
        kddokter.setName("kddokter"); // NOI18N
        FormInput.add(kddokter);
        kddokter.setBounds(105, 40, 95, 23);

        jLabel4.setText("Dokter :");
        jLabel4.setName("jLabel4"); // NOI18N
        FormInput.add(jLabel4);
        jLabel4.setBounds(0, 40, 100, 23);

        internalFrame1.add(FormInput, java.awt.BorderLayout.PAGE_START);

        Scroll.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        Scroll.setComponentPopupMenu(Popup);
        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbResep.setToolTipText("Silahkan klik untuk memilih data yang mau diedit ataupun dihapus");
        tbResep.setComponentPopupMenu(Popup);
        tbResep.setName("tbResep"); // NOI18N
        tbResep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbResepMouseClicked(evt);
            }
        });
        tbResep.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tbResepPropertyChange(evt);
            }
        });
        tbResep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbResepKeyPressed(evt);
            }
        });
        Scroll.setViewportView(tbResep);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void TCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TCariKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            BtnCariActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {
            BtnCari.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP) {
            BtnKeluar.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            tbResep.requestFocus();
        }
}//GEN-LAST:event_TCariKeyPressed

    private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
        tampil();
}//GEN-LAST:event_BtnCariActionPerformed

    private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnCariActionPerformed(null);
        } else {
            Valid.pindah(evt, TCari, BtnAll);
        }
}//GEN-LAST:event_BtnCariKeyPressed

    private void BtnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAllActionPerformed
        TCari.setText("");
        BtnCariActionPerformed(evt);
}//GEN-LAST:event_BtnAllActionPerformed

    private void BtnAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnAllKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnAllActionPerformed(null);
        } else {
            Valid.pindah(evt, BtnCari, TCari);
        }
}//GEN-LAST:event_BtnAllKeyPressed

    private void tbResepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbResepMouseClicked
        if (tbResep.getRowCount() != 0) {

        }
}//GEN-LAST:event_tbResepMouseClicked

    private void tbResepKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbResepKeyPressed
//        if (tbResep.getRowCount() != 0) {
//            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
//                i = tbResep.getSelectedColumn();
//                if ((i == 1) || (i == 8)) {
//                    if (tbResep.getSelectedRow() != -1) {
//                        tbResep.setValueAt("", tbResep.getSelectedRow(), i);
//                    }
//                }
//            } else if (evt.getKeyCode() == KeyEvent.VK_SHIFT) {
//                i = tbResep.getSelectedColumn();
//                if (i != 11) {
//                    TCari.requestFocus();
//                }
//            } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
//                i = tbResep.getSelectedColumn();
//                if (i == 8) {
//                    var.setform("DlgCariObat");
//                } else if (i == 2) {
//                }
//            } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//                i = tbResep.getSelectedColumn();
//                if ((i == 8) || (i == 9)) {
//                    TCari.requestFocus();
//                }
//            }
//        }
}//GEN-LAST:event_tbResepKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
    }//GEN-LAST:event_BtnKeluarActionPerformed

private void BtnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSimpanActionPerformed
    if (TkdPaket.getText().trim().equals("")) {
        Valid.textKosong(TkdPaket, "Kode Paket");
    } else {
        int reply = JOptionPane.showConfirmDialog(rootPane, "Eeiiiiiits, udah bener belum data yang mau disimpan..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            if (ubah == false) {
//                System.out.println(ubah);
//                if (Sequel.menyimpantf2("paket_mcu (kd_paket,nm_paket,status)", "'" + TkdPaket.getText() + "','" + TNmPaket.getText() + "','1'", "") == true) {
                simpandata();
                batalFungsi();
//                }
            }
            if (ubah == true) {
//                System.out.println(ubah);
                ubah = false;
                simpandata();
                batalFungsi();
            }
        }
    }
}//GEN-LAST:event_BtnSimpanActionPerformed

private void ppBersihkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ppBersihkanActionPerformed
    if (tbResep.getSelectedRow() > -1) {
        int reply = JOptionPane.showConfirmDialog(rootPane, "Eeiiiiiits, Yakin mau dihapus..??", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            if (Sequel.queryu2tf("delete from paket_mcu_template where id_paket=? and kd_template=? and jns_template=?", 3, new String[]{
                idPaket.getText(), tbResep.getValueAt(tbResep.getSelectedRow(), 0).toString(), tbResep.getValueAt(tbResep.getSelectedRow(), 3).toString()
            }) == true) {
                tampilObatEdit(idPaket.getText());
            } else {
                JOptionPane.showMessageDialog(null, "Gagal menghapus..!!");
            }
        }
    } else {
        JOptionPane.showMessageDialog(rootPane, "Silahkan anda pilih data terlebih dahulu..!!");
    }
}//GEN-LAST:event_ppBersihkanActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        ubah = false;
        batalFungsi();
        tampil();
    }//GEN-LAST:event_formWindowOpened

    private void tbResepPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tbResepPropertyChange

    }//GEN-LAST:event_tbResepPropertyChange

    private void btnDokter1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDokter1ActionPerformed
        master.emptTeks();
        master.isCek();
        master.setSize(internalFrame1.getWidth() - 20, internalFrame1.getHeight() - 20);
        master.setLocationRelativeTo(internalFrame1);
        master.setVisible(true);
    }//GEN-LAST:event_btnDokter1ActionPerformed

    private void BtnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBatalActionPerformed
        batalFungsi();
    }//GEN-LAST:event_BtnBatalActionPerformed

    private void BtnBatalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnBatalKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnBatalActionPerformed(null);
        }
    }//GEN-LAST:event_BtnBatalKeyPressed

    private void cmbJenisItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbJenisItemStateChanged
        tampil();
    }//GEN-LAST:event_cmbJenisItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgSetMCU dialog = new DlgSetMCU(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnAll;
    private widget.Button BtnBatal;
    private widget.Button BtnCari;
    private widget.Button BtnKeluar;
    private widget.Button BtnSimpan;
    private widget.PanelBiasa FormInput;
    private widget.Label LCount;
    private javax.swing.JPopupMenu Popup;
    private widget.ScrollPane Scroll;
    private widget.TextBox TCari;
    private widget.TextBox TNmPaket;
    private widget.TextBox TkdPaket;
    private widget.Button btnDokter1;
    private widget.ComboBox cmbJenis;
    private widget.TextBox idPaket;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel3;
    private widget.Label jLabel4;
    private widget.Label jLabel44;
    private widget.Label jLabel6;
    private widget.Label jLabel7;
    private widget.TextBox kddokter;
    private widget.Label label9;
    private widget.TextBox nmdokter;
    private widget.panelisi panelisi3;
    private javax.swing.JMenuItem ppBersihkan;
    private widget.Table tbResep;
    // End of variables declaration//GEN-END:variables

    private void tampilRalanPr() {
        isTabMode();
        Valid.tabelKosong(tabModeResep);
        z = 0;
        for (i = 0; i < tbResep.getRowCount(); i++) {
            if (!tbResep.getValueAt(i, 0).toString().equals("")) {
                z++;
            }
        }
        pilih = null;
        pilih = new boolean[z];
        kodebarang = null;
        kodebarang = new String[z];
        namabarang = null;
        namabarang = new String[z];
        harga = null;
        harga = new String[z];
        z = 0;
        for (i = 0; i < tbResep.getRowCount(); i++) {
            if (!tbResep.getValueAt(i, 1).toString().equals("")) {
                pilih[z] = Boolean.parseBoolean(tbResep.getValueAt(i, 0).toString());
                kodebarang[z] = tbResep.getValueAt(i, 1).toString();
                namabarang[z] = tbResep.getValueAt(i, 2).toString();
                harga[z] = tbResep.getValueAt(i, 3).toString();
                z++;
            }
        }

        for (i = 0; i < z; i++) {
            tabModeResep.addRow(new Object[]{
                pilih[i], kodebarang[i], namabarang[i], harga[i]
            });
        }

        try {
            psresep = koneksi.prepareStatement(
                    "select kd_jenis_prw, nm_perawatan, total_byrpr from jns_perawatan where status='1' and kd_jenis_prw like ? or status='1' and nm_perawatan like ?");
            try {
                psresep.setString(1, "%" + TCari.getText().trim() + "%");
                psresep.setString(2, "%" + TCari.getText().trim() + "%");
                rsobat = psresep.executeQuery();
                while (rsobat.next()) {
                    tabModeResep.addRow(new Object[]{false, rsobat.getString("kd_jenis_prw"), rsobat.getString("nm_perawatan"), rsobat.getString("total_byrpr")
                    });
                }
            } catch (Exception e) {
                System.out.println("Notifikasi : " + e);
            } finally {
                if (rsobat != null) {
                    rsobat.close();
                }

                if (psresep != null) {
                    psresep.close();
                }
            }
        } catch (Exception e) {
            System.out.println("Notifikasi : " + e);
        }
        LCount.setText("" + tabModeResep.getRowCount());
    }

    private void tampilRalanDr() {
        isTabMode();
        Valid.tabelKosong(tabModeResep);
        z = 0;
        for (i = 0; i < tbResep.getRowCount(); i++) {
            if (!tbResep.getValueAt(i, 0).toString().equals("")) {
                z++;
            }
        }
        pilih = null;
        pilih = new boolean[z];
        kodebarang = null;
        kodebarang = new String[z];
        namabarang = null;
        namabarang = new String[z];
        harga = null;
        harga = new String[z];
        z = 0;
        for (i = 0; i < tbResep.getRowCount(); i++) {
            if (!tbResep.getValueAt(i, 1).toString().equals("")) {
                pilih[z] = Boolean.parseBoolean(tbResep.getValueAt(i, 0).toString());
                kodebarang[z] = tbResep.getValueAt(i, 1).toString();
                namabarang[z] = tbResep.getValueAt(i, 2).toString();
                harga[z] = tbResep.getValueAt(i, 3).toString();
                z++;
            }
        }

        for (i = 0; i < z; i++) {
            tabModeResep.addRow(new Object[]{
                pilih[i], kodebarang[i], namabarang[i], harga[i]
            });
        }

        try {
            psresep = koneksi.prepareStatement(
                    "select kd_jenis_prw, nm_perawatan, total_byrdr from jns_perawatan where status='1' and kd_jenis_prw like ? or status='1' and nm_perawatan like ?");
            try {
                psresep.setString(1, "%" + TCari.getText().trim() + "%");
                psresep.setString(2, "%" + TCari.getText().trim() + "%");
                rsobat = psresep.executeQuery();
                while (rsobat.next()) {
                    tabModeResep.addRow(new Object[]{false, rsobat.getString("kd_jenis_prw"), rsobat.getString("nm_perawatan"), rsobat.getString("total_byrdr")
                    });
                }
            } catch (Exception e) {
                System.out.println("Notifikasi : " + e);
            } finally {
                if (rsobat != null) {
                    rsobat.close();
                }

                if (psresep != null) {
                    psresep.close();
                }
            }
        } catch (Exception e) {
            System.out.println("Notifikasi : " + e);
        }
        LCount.setText("" + tabModeResep.getRowCount());
    }

    public void tampilLab() {
        isTabMode();
        Valid.tabelKosong(tabModeResep);
        z = 0;
        for (i = 0; i < tbResep.getRowCount(); i++) {
            if (!tbResep.getValueAt(i, 0).toString().equals("")) {
                z++;
            }
        }
        pilih = null;
        pilih = new boolean[z];
        kodebarang = null;
        kodebarang = new String[z];
        namabarang = null;
        namabarang = new String[z];
        harga = null;
        harga = new String[z];
        z = 0;
        for (i = 0; i < tbResep.getRowCount(); i++) {
            if (!tbResep.getValueAt(i, 1).toString().equals("")) {
                pilih[z] = Boolean.parseBoolean(tbResep.getValueAt(i, 0).toString());
                kodebarang[z] = tbResep.getValueAt(i, 1).toString();
                namabarang[z] = tbResep.getValueAt(i, 2).toString();
                harga[z] = tbResep.getValueAt(i, 3).toString();
                z++;
            }
        }

        for (i = 0; i < z; i++) {
            tabModeResep.addRow(new Object[]{
                pilih[i], kodebarang[i], namabarang[i], harga[i]
            });
        }

        try {
            psresep = koneksi.prepareStatement(
                    "select kd_jenis_prw, nm_perawatan,total_byr from jns_perawatan_lab where status='1' and kd_jenis_prw like ? or status='1' and nm_perawatan like ?");
            try {
                psresep.setString(1, "%" + TCari.getText().trim() + "%");
                psresep.setString(2, "%" + TCari.getText().trim() + "%");
                rsobat = psresep.executeQuery();
                while (rsobat.next()) {
                    tabModeResep.addRow(new Object[]{false, rsobat.getString("kd_jenis_prw"), rsobat.getString("nm_perawatan"), rsobat.getString("total_byr")
                    });
                }
            } catch (Exception e) {
                System.out.println("Notifikasi : " + e);
            } finally {
                if (rsobat != null) {
                    rsobat.close();
                }

                if (psresep != null) {
                    psresep.close();
                }
            }
        } catch (Exception e) {
            System.out.println("Notifikasi : " + e);
        }
        LCount.setText("" + tabModeResep.getRowCount());
    }

    public void tampilRad() {
        isTabMode();
        Valid.tabelKosong(tabModeResep);
        z = 0;
        for (i = 0; i < tbResep.getRowCount(); i++) {
            if (!tbResep.getValueAt(i, 0).toString().equals("")) {
                z++;
            }
        }
        pilih = null;
        pilih = new boolean[z];
        kodebarang = null;
        kodebarang = new String[z];
        namabarang = null;
        namabarang = new String[z];
        harga = null;
        harga = new String[z];
        z = 0;
        for (i = 0; i < tbResep.getRowCount(); i++) {
            if (!tbResep.getValueAt(i, 1).toString().equals("")) {
                pilih[z] = Boolean.parseBoolean(tbResep.getValueAt(i, 0).toString());
                kodebarang[z] = tbResep.getValueAt(i, 1).toString();
                namabarang[z] = tbResep.getValueAt(i, 2).toString();
                harga[z] = tbResep.getValueAt(i, 3).toString();
                z++;
            }
        }

        for (i = 0; i < z; i++) {
            tabModeResep.addRow(new Object[]{
                pilih[i], kodebarang[i], namabarang[i], harga[i]
            });
        }

        try {
            psresep = koneksi.prepareStatement(
                    "select kd_jenis_prw, nm_perawatan,total_byr from jns_perawatan_radiologi where status='1' and kd_jenis_prw like ? or status='1' and nm_perawatan like ?");
            try {
                psresep.setString(1, "%" + TCari.getText().trim() + "%");
                psresep.setString(2, "%" + TCari.getText().trim() + "%");
                rsobat = psresep.executeQuery();
                while (rsobat.next()) {
                    tabModeResep.addRow(new Object[]{false, rsobat.getString("kd_jenis_prw"), rsobat.getString("nm_perawatan"), rsobat.getString("total_byr")
                    });
                }
            } catch (Exception e) {
                System.out.println("Notifikasi : " + e);
            } finally {
                if (rsobat != null) {
                    rsobat.close();
                }

                if (psresep != null) {
                    psresep.close();
                }
            }
        } catch (Exception e) {
            System.out.println("Notifikasi : " + e);
        }
        LCount.setText("" + tabModeResep.getRowCount());
    }

    public JTable getTable() {
        return tbResep;
    }

    public Button getButton() {
        return BtnSimpan;
    }

    public void isCek() {
        TCari.requestFocus();
    }

    private void simpandata() {
        try {
            koneksi.setAutoCommit(false);
            for (i = 0; i < tbResep.getRowCount(); i++) {
                if (tbResep.getValueAt(i, 0).toString().equals("true")) {
                    jenis = "";
                    switch (cmbJenis.getSelectedIndex()) {
                        case 1:
                            jenis = "Ralan Pr";
                            break;
                        case 2:
                            jenis = "Ralan Dr";
                            break;
                        case 3:
                            jenis = "Lab";
                            break;
                        case 4:
                            jenis = "Rad";
                            break;
                        default:
                            break;
                    }
                    String kd_obat = Sequel.cariIsi("SELECT kd_template FROM paket_mcu_template WHERE id_paket = '" + idPaket.getText() + "' AND kd_template = '" + tbResep.getValueAt(i, 1).toString() + "' AND jns_template = '" + jenis + "'");
                    if (kd_obat.isEmpty()) {
                        Sequel.menyimpan("paket_mcu_template (id_paket,kd_template,jns_template)", "'" + idPaket.getText() + "','" + tbResep.getValueAt(i, 1).toString() + "','" + jenis + "'");
                    }
                }
            }
            koneksi.setAutoCommit(true);
            System.out.println("Berhasil Simpan Paket");
            JOptionPane.showMessageDialog(null, "Berhasil Simpan Paket");
        } catch (Exception e) {
            System.out.println("Notif : " + e);
        }
    }

    private void batalFungsi() {
        TkdPaket.setText("");
        TNmPaket.setText("");
        TCari.setText("");
        tampil();
        cmbJenis.setSelectedIndex(0);
    }

    private void tampilObatEdit(String id) {
        tabModeResep = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        tabModeResep = new DefaultTableModel(null, new Object[]{
            "Kode Barang", "Nama Barang", "Harga", "Jenis"
        }) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
            Class[] types = new Class[]{
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        tbResep.setModel(tabModeResep);
        tbResep.setPreferredScrollableViewportSize(new Dimension(800, 800));
        tbResep.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for (i = 0; i < 4; i++) {
            TableColumn column = tbResep.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(55);
            } else if (i == 1) {
                column.setPreferredWidth(250);
            } else if (i == 2) {
                column.setPreferredWidth(60);
            } else if (i == 3) {
                column.setPreferredWidth(55);
            }
        }
        tbResep.setDefaultRenderer(Object.class, new WarnaTable());

        ubah = false;
        try {
            Valid.tabelKosong(tabModeResep);
            psresep = koneksi.prepareStatement(
                    "select paket_mcu_template.kd_template, jns_perawatan.nm_perawatan,paket_mcu_template.jns_template, jns_perawatan.total_byrdr from paket_mcu_template inner join jns_perawatan "
                    + "on paket_mcu_template.kd_template=jns_perawatan.kd_jenis_prw where paket_mcu_template.id_paket=? and jns_template='Ralan Dr' order by paket_mcu_template.kd_template");
            try {
                psresep.setString(1, id);
                rsobat = psresep.executeQuery();
                while (rsobat.next()) {
                    tabModeResep.addRow(new Object[]{rsobat.getString("kd_template"), rsobat.getString("nm_perawatan"), rsobat.getString("total_byrdr"), rsobat.getString("jns_template")
                    });
                }
                ubah = true;
            } catch (Exception e) {
                System.out.println("Notifikasi : " + e);
            } finally {
                if (rsobat != null) {
                    rsobat.close();
                }

                if (psresep != null) {
                    psresep.close();
                }
            }

            ps4 = koneksi.prepareStatement(
                    "select paket_mcu_template.kd_template, jns_perawatan.nm_perawatan,paket_mcu_template.jns_template, jns_perawatan.total_byrpr from paket_mcu_template inner join jns_perawatan "
                    + "on paket_mcu_template.kd_template=jns_perawatan.kd_jenis_prw where paket_mcu_template.id_paket=? and jns_template='Ralan Pr' order by paket_mcu_template.kd_template");
            try {
                ps4.setString(1, id);
                rs4 = ps4.executeQuery();
                while (rs4.next()) {
                    tabModeResep.addRow(new Object[]{rs4.getString("kd_template"), rs4.getString("nm_perawatan"), rs4.getString("total_byrpr"), rs4.getString("jns_template")
                    });
                }
                ubah = true;
            } catch (Exception e) {
                System.out.println("Notifikasi : " + e);
            } finally {
                if (rsobat != null) {
                    rsobat.close();
                }

                if (ps4 != null) {
                    ps4.close();
                }
            }

            ps2 = koneksi.prepareStatement(
                    "select paket_mcu_template.kd_template, jns_perawatan_lab.nm_perawatan,paket_mcu_template.jns_template,jns_perawatan_lab.total_byr from paket_mcu_template inner join jns_perawatan_lab "
                    + "on paket_mcu_template.kd_template=jns_perawatan_lab.kd_jenis_prw where paket_mcu_template.id_paket=? and jns_template='Lab' order by paket_mcu_template.kd_template");
            try {
                ps2.setString(1, id);
                rs2 = ps2.executeQuery();
                while (rs2.next()) {
                    tabModeResep.addRow(new Object[]{rs2.getString("kd_template"), rs2.getString("nm_perawatan"), rs2.getString("total_byr"), rs2.getString("jns_template")
                    });
                }
                ubah = true;
            } catch (Exception e) {
                System.out.println("Notifikasi : " + e);
            } finally {
                if (rs2 != null) {
                    rs2.close();
                }

                if (ps2 != null) {
                    ps2.close();
                }
            }

            ps3 = koneksi.prepareStatement(
                    "select paket_mcu_template.kd_template, jns_perawatan_radiologi.nm_perawatan,paket_mcu_template.jns_template,jns_perawatan_radiologi.total_byr  from paket_mcu_template inner join jns_perawatan_radiologi "
                    + "on paket_mcu_template.kd_template=jns_perawatan_radiologi.kd_jenis_prw where paket_mcu_template.id_paket=? and jns_template='Rad' order by paket_mcu_template.kd_template");
            try {
                ps3.setString(1, id);
                rs3 = ps3.executeQuery();
                while (rs3.next()) {
                    tabModeResep.addRow(new Object[]{rs3.getString("kd_template"), rs3.getString("nm_perawatan"), rs3.getString("total_byr"), rs3.getString("jns_template")
                    });
                }
                ubah = true;
            } catch (Exception e) {
                System.out.println("Notifikasi : " + e);
            } finally {
                if (rs3 != null) {
                    rs3.close();
                }

                if (ps3 != null) {
                    ps3.close();
                }
            }
        } catch (Exception e) {
            System.out.println("Notifikasi : " + e);
        }
//        System.out.println(ubah);
        LCount.setText("" + tabModeResep.getRowCount());
    }

    private void tampil() {
        switch (cmbJenis.getSelectedIndex()) {
            case 1:
                tampilRalanPr();
                break;
            case 2:
                tampilRalanDr();
                break;
            case 3:
                tampilLab();
                break;
            case 4:
                tampilRad();
                break;
            default:
                break;
        }
    }

    private void isTabMode() {
        tabModeResep = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        tabModeResep = new DefaultTableModel(null, new Object[]{
            "K", "Kode Barang", "Nama Barang", "Harga"
        }) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                boolean a = false;
                if ((colIndex == 0)) {
                    a = true;
                }
                return a;
            }
            Class[] types = new Class[]{
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        tbResep.setModel(tabModeResep);
        tbResep.setPreferredScrollableViewportSize(new Dimension(800, 800));
        tbResep.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for (i = 0; i < 4; i++) {
            TableColumn column = tbResep.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(30);
            } else if (i == 1) {
                column.setPreferredWidth(55);
            } else if (i == 2) {
                column.setPreferredWidth(250);
            } else if (i == 3) {
                column.setPreferredWidth(55);
            }
        }
        tbResep.setDefaultRenderer(Object.class, new WarnaTable());
    }
}
